// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockGrpcConn creates a new instance of MockGrpcConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGrpcConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGrpcConn {
	mock := &MockGrpcConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGrpcConn is an autogenerated mock type for the GrpcConn type
type MockGrpcConn struct {
	mock.Mock
}

type MockGrpcConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGrpcConn) EXPECT() *MockGrpcConn_Expecter {
	return &MockGrpcConn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockGrpcConn
func (_mock *MockGrpcConn) Close() {
	_mock.Called()
	return
}

// MockGrpcConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockGrpcConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockGrpcConn_Expecter) Close() *MockGrpcConn_Close_Call {
	return &MockGrpcConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockGrpcConn_Close_Call) Run(run func()) *MockGrpcConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpcConn_Close_Call) Return() *MockGrpcConn_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGrpcConn_Close_Call) RunAndReturn(run func()) *MockGrpcConn_Close_Call {
	_c.Run(run)
	return _c
}

// Dial provides a mock function for the type MockGrpcConn
func (_mock *MockGrpcConn) Dial() *grpc.ClientConn {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 *grpc.ClientConn
	if returnFunc, ok := ret.Get(0).(func() *grpc.ClientConn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}
	return r0
}

// MockGrpcConn_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockGrpcConn_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
func (_e *MockGrpcConn_Expecter) Dial() *MockGrpcConn_Dial_Call {
	return &MockGrpcConn_Dial_Call{Call: _e.mock.On("Dial")}
}

func (_c *MockGrpcConn_Dial_Call) Run(run func()) *MockGrpcConn_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpcConn_Dial_Call) Return(clientConn *grpc.ClientConn) *MockGrpcConn_Dial_Call {
	_c.Call.Return(clientConn)
	return _c
}

func (_c *MockGrpcConn_Dial_Call) RunAndReturn(run func() *grpc.ClientConn) *MockGrpcConn_Dial_Call {
	_c.Call.Return(run)
	return _c
}

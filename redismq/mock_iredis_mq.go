// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package redismq

import (
	"github.com/adjust/rmq/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIRedisMQ creates a new instance of MockIRedisMQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRedisMQ(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRedisMQ {
	mock := &MockIRedisMQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRedisMQ is an autogenerated mock type for the IRedisMQ type
type MockIRedisMQ struct {
	mock.Mock
}

type MockIRedisMQ_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRedisMQ) EXPECT() *MockIRedisMQ_Expecter {
	return &MockIRedisMQ_Expecter{mock: &_m.Mock}
}

// AddQueue provides a mock function for the type MockIRedisMQ
func (_mock *MockIRedisMQ) AddQueue(name string, handler rmq.ConsumerFunc, numConsumers int) error {
	ret := _mock.Called(name, handler, numConsumers)

	if len(ret) == 0 {
		panic("no return value specified for AddQueue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, rmq.ConsumerFunc, int) error); ok {
		r0 = returnFunc(name, handler, numConsumers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRedisMQ_AddQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddQueue'
type MockIRedisMQ_AddQueue_Call struct {
	*mock.Call
}

// AddQueue is a helper method to define mock.On call
//   - name string
//   - handler rmq.ConsumerFunc
//   - numConsumers int
func (_e *MockIRedisMQ_Expecter) AddQueue(name interface{}, handler interface{}, numConsumers interface{}) *MockIRedisMQ_AddQueue_Call {
	return &MockIRedisMQ_AddQueue_Call{Call: _e.mock.On("AddQueue", name, handler, numConsumers)}
}

func (_c *MockIRedisMQ_AddQueue_Call) Run(run func(name string, handler rmq.ConsumerFunc, numConsumers int)) *MockIRedisMQ_AddQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 rmq.ConsumerFunc
		if args[1] != nil {
			arg1 = args[1].(rmq.ConsumerFunc)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIRedisMQ_AddQueue_Call) Return(err error) *MockIRedisMQ_AddQueue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRedisMQ_AddQueue_Call) RunAndReturn(run func(name string, handler rmq.ConsumerFunc, numConsumers int) error) *MockIRedisMQ_AddQueue_Call {
	_c.Call.Return(run)
	return _c
}

// IsHasQueue provides a mock function for the type MockIRedisMQ
func (_mock *MockIRedisMQ) IsHasQueue(name string) bool {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for IsHasQueue")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIRedisMQ_IsHasQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHasQueue'
type MockIRedisMQ_IsHasQueue_Call struct {
	*mock.Call
}

// IsHasQueue is a helper method to define mock.On call
//   - name string
func (_e *MockIRedisMQ_Expecter) IsHasQueue(name interface{}) *MockIRedisMQ_IsHasQueue_Call {
	return &MockIRedisMQ_IsHasQueue_Call{Call: _e.mock.On("IsHasQueue", name)}
}

func (_c *MockIRedisMQ_IsHasQueue_Call) Run(run func(name string)) *MockIRedisMQ_IsHasQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRedisMQ_IsHasQueue_Call) Return(b bool) *MockIRedisMQ_IsHasQueue_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIRedisMQ_IsHasQueue_Call) RunAndReturn(run func(name string) bool) *MockIRedisMQ_IsHasQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveQueue provides a mock function for the type MockIRedisMQ
func (_mock *MockIRedisMQ) RemoveQueue(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for RemoveQueue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRedisMQ_RemoveQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveQueue'
type MockIRedisMQ_RemoveQueue_Call struct {
	*mock.Call
}

// RemoveQueue is a helper method to define mock.On call
//   - name string
func (_e *MockIRedisMQ_Expecter) RemoveQueue(name interface{}) *MockIRedisMQ_RemoveQueue_Call {
	return &MockIRedisMQ_RemoveQueue_Call{Call: _e.mock.On("RemoveQueue", name)}
}

func (_c *MockIRedisMQ_RemoveQueue_Call) Run(run func(name string)) *MockIRedisMQ_RemoveQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRedisMQ_RemoveQueue_Call) Return(err error) *MockIRedisMQ_RemoveQueue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRedisMQ_RemoveQueue_Call) RunAndReturn(run func(name string) error) *MockIRedisMQ_RemoveQueue_Call {
	_c.Call.Return(run)
	return _c
}

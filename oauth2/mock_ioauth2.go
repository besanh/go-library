// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package oauth2

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// NewMockIOauth2 creates a new instance of MockIOauth2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOauth2(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOauth2 {
	mock := &MockIOauth2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOauth2 is an autogenerated mock type for the IOAuth2 type
type MockIOauth2 struct {
	mock.Mock
}

type MockIOauth2_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOauth2) EXPECT() *MockIOauth2_Expecter {
	return &MockIOauth2_Expecter{mock: &_m.Mock}
}

// AuthCodeURL provides a mock function for the type MockIOauth2
func (_mock *MockIOauth2) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(state, opts)
	} else {
		tmpRet = _mock.Called(state)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AuthCodeURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...oauth2.AuthCodeOption) string); ok {
		r0 = returnFunc(state, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIOauth2_AuthCodeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthCodeURL'
type MockIOauth2_AuthCodeURL_Call struct {
	*mock.Call
}

// AuthCodeURL is a helper method to define mock.On call
//   - state string
//   - opts ...oauth2.AuthCodeOption
func (_e *MockIOauth2_Expecter) AuthCodeURL(state interface{}, opts ...interface{}) *MockIOauth2_AuthCodeURL_Call {
	return &MockIOauth2_AuthCodeURL_Call{Call: _e.mock.On("AuthCodeURL",
		append([]interface{}{state}, opts...)...)}
}

func (_c *MockIOauth2_AuthCodeURL_Call) Run(run func(state string, opts ...oauth2.AuthCodeOption)) *MockIOauth2_AuthCodeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []oauth2.AuthCodeOption
		var variadicArgs []oauth2.AuthCodeOption
		if len(args) > 1 {
			variadicArgs = args[1].([]oauth2.AuthCodeOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockIOauth2_AuthCodeURL_Call) Return(s string) *MockIOauth2_AuthCodeURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIOauth2_AuthCodeURL_Call) RunAndReturn(run func(state string, opts ...oauth2.AuthCodeOption) string) *MockIOauth2_AuthCodeURL_Call {
	_c.Call.Return(run)
	return _c
}

// Exchange provides a mock function for the type MockIOauth2
func (_mock *MockIOauth2) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 *oauth2.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*oauth2.Token, error)); ok {
		return returnFunc(ctx, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *oauth2.Token); ok {
		r0 = returnFunc(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOauth2_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type MockIOauth2_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockIOauth2_Expecter) Exchange(ctx interface{}, code interface{}) *MockIOauth2_Exchange_Call {
	return &MockIOauth2_Exchange_Call{Call: _e.mock.On("Exchange", ctx, code)}
}

func (_c *MockIOauth2_Exchange_Call) Run(run func(ctx context.Context, code string)) *MockIOauth2_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOauth2_Exchange_Call) Return(token *oauth2.Token, err error) *MockIOauth2_Exchange_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockIOauth2_Exchange_Call) RunAndReturn(run func(ctx context.Context, code string) (*oauth2.Token, error)) *MockIOauth2_Exchange_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPClient provides a mock function for the type MockIOauth2
func (_mock *MockIOauth2) HTTPClient(ctx context.Context) *http.Client {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HTTPClient")
	}

	var r0 *http.Client
	if returnFunc, ok := ret.Get(0).(func(context.Context) *http.Client); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}
	return r0
}

// MockIOauth2_HTTPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPClient'
type MockIOauth2_HTTPClient_Call struct {
	*mock.Call
}

// HTTPClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIOauth2_Expecter) HTTPClient(ctx interface{}) *MockIOauth2_HTTPClient_Call {
	return &MockIOauth2_HTTPClient_Call{Call: _e.mock.On("HTTPClient", ctx)}
}

func (_c *MockIOauth2_HTTPClient_Call) Run(run func(ctx context.Context)) *MockIOauth2_HTTPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOauth2_HTTPClient_Call) Return(client *http.Client) *MockIOauth2_HTTPClient_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockIOauth2_HTTPClient_Call) RunAndReturn(run func(ctx context.Context) *http.Client) *MockIOauth2_HTTPClient_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function for the type MockIOauth2
func (_mock *MockIOauth2) Token() (*oauth2.Token, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 *oauth2.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*oauth2.Token, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *oauth2.Token); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOauth2_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockIOauth2_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
func (_e *MockIOauth2_Expecter) Token() *MockIOauth2_Token_Call {
	return &MockIOauth2_Token_Call{Call: _e.mock.On("Token")}
}

func (_c *MockIOauth2_Token_Call) Run(run func()) *MockIOauth2_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIOauth2_Token_Call) Return(token *oauth2.Token, err error) *MockIOauth2_Token_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockIOauth2_Token_Call) RunAndReturn(run func() (*oauth2.Token, error)) *MockIOauth2_Token_Call {
	_c.Call.Return(run)
	return _c
}

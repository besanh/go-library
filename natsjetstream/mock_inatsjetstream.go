// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package natsjetstream

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockINatsJetstream creates a new instance of MockINatsJetstream. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockINatsJetstream(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockINatsJetstream {
	mock := &MockINatsJetstream{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockINatsJetstream is an autogenerated mock type for the INatsJetstream type
type MockINatsJetstream struct {
	mock.Mock
}

type MockINatsJetstream_Expecter struct {
	mock *mock.Mock
}

func (_m *MockINatsJetstream) EXPECT() *MockINatsJetstream_Expecter {
	return &MockINatsJetstream_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockINatsJetstream
func (_mock *MockINatsJetstream) Connect() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockINatsJetstream_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockINatsJetstream_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockINatsJetstream_Expecter) Connect() *MockINatsJetstream_Connect_Call {
	return &MockINatsJetstream_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockINatsJetstream_Connect_Call) Run(run func()) *MockINatsJetstream_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockINatsJetstream_Connect_Call) Return(err error) *MockINatsJetstream_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockINatsJetstream_Connect_Call) RunAndReturn(run func() error) *MockINatsJetstream_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockINatsJetstream
func (_mock *MockINatsJetstream) Ping() {
	_mock.Called()
	return
}

// MockINatsJetstream_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockINatsJetstream_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *MockINatsJetstream_Expecter) Ping() *MockINatsJetstream_Ping_Call {
	return &MockINatsJetstream_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *MockINatsJetstream_Ping_Call) Run(run func()) *MockINatsJetstream_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockINatsJetstream_Ping_Call) Return() *MockINatsJetstream_Ping_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockINatsJetstream_Ping_Call) RunAndReturn(run func()) *MockINatsJetstream_Ping_Call {
	_c.Run(run)
	return _c
}

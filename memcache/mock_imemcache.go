// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package memcache

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIMemcache creates a new instance of MockIMemcache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMemcache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMemcache {
	mock := &MockIMemcache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMemcache is an autogenerated mock type for the IMemCache type
type MockIMemcache struct {
	mock.Mock
}

type MockIMemcache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMemcache) EXPECT() *MockIMemcache_Expecter {
	return &MockIMemcache_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockIMemcache
func (_mock *MockIMemcache) Close() {
	_mock.Called()
	return
}

// MockIMemcache_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIMemcache_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIMemcache_Expecter) Close() *MockIMemcache_Close_Call {
	return &MockIMemcache_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIMemcache_Close_Call) Run(run func()) *MockIMemcache_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMemcache_Close_Call) Return() *MockIMemcache_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIMemcache_Close_Call) RunAndReturn(run func()) *MockIMemcache_Close_Call {
	_c.Run(run)
	return _c
}

// Del provides a mock function for the type MockIMemcache
func (_mock *MockIMemcache) Del(key string) {
	_mock.Called(key)
	return
}

// MockIMemcache_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockIMemcache_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *MockIMemcache_Expecter) Del(key interface{}) *MockIMemcache_Del_Call {
	return &MockIMemcache_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockIMemcache_Del_Call) Run(run func(key string)) *MockIMemcache_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIMemcache_Del_Call) Return() *MockIMemcache_Del_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIMemcache_Del_Call) RunAndReturn(run func(key string)) *MockIMemcache_Del_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type MockIMemcache
func (_mock *MockIMemcache) Get(key string) any {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(string) any); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockIMemcache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIMemcache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockIMemcache_Expecter) Get(key interface{}) *MockIMemcache_Get_Call {
	return &MockIMemcache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockIMemcache_Get_Call) Run(run func(key string)) *MockIMemcache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIMemcache_Get_Call) Return(v any) *MockIMemcache_Get_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockIMemcache_Get_Call) RunAndReturn(run func(key string) any) *MockIMemcache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockIMemcache
func (_mock *MockIMemcache) Set(key string, value any, ttl time.Duration) {
	_mock.Called(key, value, ttl)
	return
}

// MockIMemcache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockIMemcache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value any
//   - ttl time.Duration
func (_e *MockIMemcache_Expecter) Set(key interface{}, value interface{}, ttl interface{}) *MockIMemcache_Set_Call {
	return &MockIMemcache_Set_Call{Call: _e.mock.On("Set", key, value, ttl)}
}

func (_c *MockIMemcache_Set_Call) Run(run func(key string, value any, ttl time.Duration)) *MockIMemcache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIMemcache_Set_Call) Return() *MockIMemcache_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIMemcache_Set_Call) RunAndReturn(run func(key string, value any, ttl time.Duration)) *MockIMemcache_Set_Call {
	_c.Run(run)
	return _c
}

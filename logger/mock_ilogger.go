// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package logger

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockILogger creates a new instance of MockILogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILogger {
	mock := &MockILogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockILogger is an autogenerated mock type for the ILogger type
type MockILogger struct {
	mock.Mock
}

type MockILogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILogger) EXPECT() *MockILogger_Expecter {
	return &MockILogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockILogger
func (_mock *MockILogger) Debug(msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockILogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockILogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - fields ...any
func (_e *MockILogger_Expecter) Debug(msg interface{}, fields ...interface{}) *MockILogger_Debug_Call {
	return &MockILogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockILogger_Debug_Call) Run(run func(msg string, fields ...any)) *MockILogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockILogger_Debug_Call) Return() *MockILogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Debug_Call) RunAndReturn(run func(msg string, fields ...any)) *MockILogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockILogger
func (_mock *MockILogger) Error(msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockILogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockILogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - fields ...any
func (_e *MockILogger_Expecter) Error(msg interface{}, fields ...interface{}) *MockILogger_Error_Call {
	return &MockILogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockILogger_Error_Call) Run(run func(msg string, fields ...any)) *MockILogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockILogger_Error_Call) Return() *MockILogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Error_Call) RunAndReturn(run func(msg string, fields ...any)) *MockILogger_Error_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function for the type MockILogger
func (_mock *MockILogger) Fatal(msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockILogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockILogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - fields ...any
func (_e *MockILogger_Expecter) Fatal(msg interface{}, fields ...interface{}) *MockILogger_Fatal_Call {
	return &MockILogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockILogger_Fatal_Call) Run(run func(msg string, fields ...any)) *MockILogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockILogger_Fatal_Call) Return() *MockILogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Fatal_Call) RunAndReturn(run func(msg string, fields ...any)) *MockILogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockILogger
func (_mock *MockILogger) Info(msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockILogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockILogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - fields ...any
func (_e *MockILogger_Expecter) Info(msg interface{}, fields ...interface{}) *MockILogger_Info_Call {
	return &MockILogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockILogger_Info_Call) Run(run func(msg string, fields ...any)) *MockILogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockILogger_Info_Call) Return() *MockILogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Info_Call) RunAndReturn(run func(msg string, fields ...any)) *MockILogger_Info_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockILogger
func (_mock *MockILogger) Warn(msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockILogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockILogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - fields ...any
func (_e *MockILogger_Expecter) Warn(msg interface{}, fields ...interface{}) *MockILogger_Warn_Call {
	return &MockILogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockILogger_Warn_Call) Run(run func(msg string, fields ...any)) *MockILogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []any
		var variadicArgs []any
		if len(args) > 1 {
			variadicArgs = args[1].([]any)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockILogger_Warn_Call) Return() *MockILogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILogger_Warn_Call) RunAndReturn(run func(msg string, fields ...any)) *MockILogger_Warn_Call {
	_c.Run(run)
	return _c
}

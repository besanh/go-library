// Code generated by mockery v2.53.4. DO NOT EDIT.

package metric

import (
	"net/http"

	"github.com/stretchr/testify/mock"

	"github.com/prometheus/client_golang/prometheus"
)

// IMetricMock is an autogenerated mock type for the IMetricMock type
type IMetricMock struct {
	mock.Mock
}

// Handler provides a mock function with no fields
func (_m *IMetricMock) Handler() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// Instrument provides a mock function with given fields: handlerName, next
func (_m *IMetricMock) Instrument(handlerName string, next http.Handler) http.Handler {
	ret := _m.Called(handlerName, next)

	if len(ret) == 0 {
		panic("no return value specified for Instrument")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(string, http.Handler) http.Handler); ok {
		r0 = rf(handlerName, next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// RegisterCustom provides a mock function with given fields: c
func (_m *IMetricMock) RegisterCustom(c prometheus.Collector) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMetricMock creates a new instance of IMetricMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMetricMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMetricMock {
	mock := &IMetricMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package metric

import (
	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIMetric creates a new instance of MockIMetric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMetric {
	mock := &MockIMetric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMetric is an autogenerated mock type for the IMetric type
type MockIMetric struct {
	mock.Mock
}

type MockIMetric_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMetric) EXPECT() *MockIMetric_Expecter {
	return &MockIMetric_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function for the type MockIMetric
func (_mock *MockIMetric) Handler() http.Handler {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// MockIMetric_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockIMetric_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockIMetric_Expecter) Handler() *MockIMetric_Handler_Call {
	return &MockIMetric_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockIMetric_Handler_Call) Run(run func()) *MockIMetric_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMetric_Handler_Call) Return(handler http.Handler) *MockIMetric_Handler_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *MockIMetric_Handler_Call) RunAndReturn(run func() http.Handler) *MockIMetric_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Instrument provides a mock function for the type MockIMetric
func (_mock *MockIMetric) Instrument(handlerName string, next http.Handler) http.Handler {
	ret := _mock.Called(handlerName, next)

	if len(ret) == 0 {
		panic("no return value specified for Instrument")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func(string, http.Handler) http.Handler); ok {
		r0 = returnFunc(handlerName, next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// MockIMetric_Instrument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Instrument'
type MockIMetric_Instrument_Call struct {
	*mock.Call
}

// Instrument is a helper method to define mock.On call
//   - handlerName string
//   - next http.Handler
func (_e *MockIMetric_Expecter) Instrument(handlerName interface{}, next interface{}) *MockIMetric_Instrument_Call {
	return &MockIMetric_Instrument_Call{Call: _e.mock.On("Instrument", handlerName, next)}
}

func (_c *MockIMetric_Instrument_Call) Run(run func(handlerName string, next http.Handler)) *MockIMetric_Instrument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 http.Handler
		if args[1] != nil {
			arg1 = args[1].(http.Handler)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIMetric_Instrument_Call) Return(handler http.Handler) *MockIMetric_Instrument_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *MockIMetric_Instrument_Call) RunAndReturn(run func(handlerName string, next http.Handler) http.Handler) *MockIMetric_Instrument_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCustom provides a mock function for the type MockIMetric
func (_mock *MockIMetric) RegisterCustom(c prometheus.Collector) error {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCustom")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = returnFunc(c)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIMetric_RegisterCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCustom'
type MockIMetric_RegisterCustom_Call struct {
	*mock.Call
}

// RegisterCustom is a helper method to define mock.On call
//   - c prometheus.Collector
func (_e *MockIMetric_Expecter) RegisterCustom(c interface{}) *MockIMetric_RegisterCustom_Call {
	return &MockIMetric_RegisterCustom_Call{Call: _e.mock.On("RegisterCustom", c)}
}

func (_c *MockIMetric_RegisterCustom_Call) Run(run func(c prometheus.Collector)) *MockIMetric_RegisterCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 prometheus.Collector
		if args[0] != nil {
			arg0 = args[0].(prometheus.Collector)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIMetric_RegisterCustom_Call) Return(err error) *MockIMetric_RegisterCustom_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIMetric_RegisterCustom_Call) RunAndReturn(run func(c prometheus.Collector) error) *MockIMetric_RegisterCustom_Call {
	_c.Call.Return(run)
	return _c
}

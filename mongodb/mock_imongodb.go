// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongodb

import (
	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/mongo"
)

// NewMockIMongodb creates a new instance of MockIMongodb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMongodb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMongodb {
	mock := &MockIMongodb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMongodb is an autogenerated mock type for the IMongoDB type
type MockIMongodb struct {
	mock.Mock
}

type MockIMongodb_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMongodb) EXPECT() *MockIMongodb_Expecter {
	return &MockIMongodb_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockIMongodb
func (_mock *MockIMongodb) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIMongodb_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIMongodb_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockIMongodb_Expecter) Close() *MockIMongodb_Close_Call {
	return &MockIMongodb_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockIMongodb_Close_Call) Run(run func()) *MockIMongodb_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIMongodb_Close_Call) Return(err error) *MockIMongodb_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIMongodb_Close_Call) RunAndReturn(run func() error) *MockIMongodb_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function for the type MockIMongodb
func (_mock *MockIMongodb) Collection(name string) *mongo.Collection {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 *mongo.Collection
	if returnFunc, ok := ret.Get(0).(func(string) *mongo.Collection); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}
	return r0
}

// MockIMongodb_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockIMongodb_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - name string
func (_e *MockIMongodb_Expecter) Collection(name interface{}) *MockIMongodb_Collection_Call {
	return &MockIMongodb_Collection_Call{Call: _e.mock.On("Collection", name)}
}

func (_c *MockIMongodb_Collection_Call) Run(run func(name string)) *MockIMongodb_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIMongodb_Collection_Call) Return(collection *mongo.Collection) *MockIMongodb_Collection_Call {
	_c.Call.Return(collection)
	return _c
}

func (_c *MockIMongodb_Collection_Call) RunAndReturn(run func(name string) *mongo.Collection) *MockIMongodb_Collection_Call {
	_c.Call.Return(run)
	return _c
}
